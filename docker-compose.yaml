services:
  api:
    container_name: "${APP_NAME}-api"
    build:
      context: .
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    image: "base-image"
    volumes:
      - .:/app
    command: /app/startup.sh
    ports:
      - "8000:8000"
    depends_on:
      - db
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT}

  grpc:
    container_name: "${APP_NAME}-grpc"
    build:
      context: .
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    image: "base-image"
    volumes:
      - .:/app
    command: python /app/app/rpc.py
    ports:
      - "5001:5001"
    depends_on:
      - db
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT}

  db:
    container_name: "${APP_NAME}-database"
    image: postgres:14
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  redis:
    container_name: "${APP_NAME}-redis"
    restart: unless-stopped
    image: redis:6.2.7
    command: "redis-server /usr/local/etc/redis/redis.conf"
    ports:
      - "${REDIS_PORT}:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf

  celery-worker:
    image: "botinow-backend-app"
    build:
      context: .
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - .:/app
    depends_on:
      - redis

  celery-beat:
    image: "base-image"
    build: .
    container_name: "${APP_NAME}-celery-beat"
    command: celery -A app.core.celery.celery beat
    volumes:
      - .:/app
    depends_on:
      - db
      - api
      - redis

  celery-flower:
    image: "base-image"
    build: .
    container_name: "${APP_NAME}-celery-flower"
    command: celery -A app.core.celery.celery flower --port=5566
    volumes:
      - .:/app
    ports:
      - "5566:5566"
    depends_on:
      - db
      - api
      - redis

volumes:
  postgres-data:
  redis-data:
